<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-05-04T23:41:37+08:00</updated><id>http://localhost:4000/</id><title type="html">Yu Zhang’s Homepage</title><subtitle>My personal website where you can know me and get in touch with me.</subtitle><author><name>Yu Zhang</name><email>yu.zhang.bit@gmail.com</email><uri>http://yuzhangbit.github.io</uri></author><entry><title type="html">Jekyll Scholar Setup</title><link href="http://localhost:4000/jekyll-scholar-setup/" rel="alternate" type="text/html" title="Jekyll Scholar Setup" /><published>2018-05-03T00:00:00+08:00</published><updated>2018-05-03T00:00:00+08:00</updated><id>http://localhost:4000/jekyll-scholar-setup</id><content type="html" xml:base="http://localhost:4000/jekyll-scholar-setup/"></content><author><name>Yu Zhang</name><email>yu.zhang.bit@gmail.com</email><uri>http://yuzhangbit.github.io</uri></author><summary type="html"></summary></entry><entry><title type="html">rosparam_handler usage</title><link href="http://localhost:4000/tools/ros-param-handler/" rel="alternate" type="text/html" title="rosparam_handler usage" /><published>2018-04-19T00:00:00+08:00</published><updated>2018-04-19T00:00:00+08:00</updated><id>http://localhost:4000/tools/ros-param-handler</id><content type="html" xml:base="http://localhost:4000/tools/ros-param-handler/">&lt;p&gt;There are two ways to set parameters in ROS. One is reading parameter value from yaml files to the &lt;a href=&quot;http://wiki.ros.org/Parameter%20Server&quot;&gt;parameter_server&lt;/a&gt;. It’s not flexisible to adjust the values of parameters on parameter_server on the fly.
The parameters are passed to your app classes by the private ros node handle. You have to crease the variables in the class to hold these values.&lt;/p&gt;

&lt;p&gt;The second method is using &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic_reconfigure&lt;/code&gt;. You define types of parameters in a python file. Then the &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic_reconfigure&lt;/code&gt; tool will generate a header file that you can call directly. It seems like an interface file generated by IDL (Interface Definition Language) such as rosmsg and protobuf. You can adjust the values of parameters through the dynamic_reconfigure gui in rqt on the fly.
Thus the parameter_server sounds like a static configuration tool and dynamic_reconfigure is a dynamic configuration tool for parameters.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/cbandera/rosparam_handler&quot;&gt;rosparam_handler&lt;/a&gt; is a nice tool that unifies these two functionalities and makes these two types of parameters live in the same namespace to avoid redundancy.&lt;/p&gt;

&lt;p&gt;The orignal tutorials did a great job in explaining the details in seperate tutorials. Here I want to present the necessary changes you need to do from a global perspective. Before diving into the details, please refer to the instruction in &lt;a href=&quot;https://github.com/cbandera/rosparam_handler&quot;&gt;rosparam_handler&lt;/a&gt; to install the ros package.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Define the parameter types and properties in a python file. Note this file is used to generate header-only class that you can call.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;rosparam_handler&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic_reconfigure&lt;/code&gt; as dependencies in package.xml.&lt;/p&gt;

    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;depend&amp;gt;&lt;/span&gt;rosparam_handler&lt;span class=&quot;nt&quot;&gt;&amp;lt;/depend&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;depend&amp;gt;&lt;/span&gt;dynamic_reconfigure&lt;span class=&quot;nt&quot;&gt;&amp;lt;/depend&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Configure the CMakelists.txt for it.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;#step one&lt;/span&gt;
  find_package&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;catkin REQUIRED COMPONENTS rosparam_handler dynamic_reconfigure&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#step two, note that this command has to go before the catkin_package command.&lt;/span&gt;
  generate_ros_paramter_files&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
   cfg/Some.params    &lt;span class=&quot;c&quot;&gt;## for generating parameters header files&lt;/span&gt;
   &lt;span class=&quot;c&quot;&gt;#cfg/someCfgFile.cfg   ## for generating dynamic configuration files&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# note: below commands are related to your own app.&lt;/span&gt;
  add_executable&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;example_excutable
   src/some.cpp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  target_link_libraries&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;example_excutable
   &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;some_libs&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#step three, add dependencies, note that this command should go after an example build command like above&lt;/span&gt;
  add_dependencies&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;example_executable &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;_genparam&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;## To generate SomeParamters.h file&lt;/span&gt;
  add_dependencies&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;example_executable &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;_gencfg&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;## To generate SomeConfig.h file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Once above steps done, you should be able to generate header-only classes for parameters or cfg to use.&lt;/p&gt;

    &lt;p&gt;Note: you can’t actually find the generated header files in your package source folder. But you can see them in &lt;code class=&quot;highlighter-rouge&quot;&gt;catkin_ws/devel/include/package_name&lt;/code&gt; for ROS or &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake-build-debug/devel/include/package_name&lt;/code&gt; for CLion like below&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SomeParameters.h  # *Parameters.h, this file will hold a struct called &amp;lt;name&amp;gt;Paramters
 SomeConfig.h      # *Config.h, this file will hold the normal dynamic_reconfigure Config struct.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;use the generated parameter struct in your ROS node class.
    &lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;// include the header file&lt;/span&gt;
 &lt;span class=&quot;cp&quot;&gt;#include &quot;package_name/SomeParameters.h&quot;
&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// declare the instance in your class as a member&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;package_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeParameters&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Initialize your parameters from the parameter_server (YAML file loader) via the private ROS node handle.&lt;/p&gt;
    &lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;MyNodeClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyNodeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ros&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NodeHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;~&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// use the private node handle. Please use getPrivateNodeHandle() for nodelets&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromParamServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;parameter_server&lt;/code&gt; does not create these values of parameter from nowhere. It actually loads these values from the YAML file through the roslaunch system as follows.&lt;/p&gt;

    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;launch&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;config&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;default=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$(find package_name)/launch/demo_params.yaml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

     &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pkg=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;package_name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;executable_type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;node_name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;args=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;output=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;screen&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;rosparam&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;command=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;load&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$(arg config)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/node&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/launch&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The YMAL file may look like this.&lt;/p&gt;
    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;na&quot;&gt;int_param&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;double_param&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;12.2&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;bool_param&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;True&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;vector_param&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;3.4&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;map_param&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;b&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;c&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.3&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;configurable_parameter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;handy tool for modifying parameters on the fly.&lt;/p&gt;

    &lt;p&gt;We are not done yet. If you define a parameter as a configurable object, then you can modity it on the fly just like the normal dynamic_reconfigure config parameter through rqt. You need to create a dynamic reconfiguration server to enable this feature.&lt;/p&gt;

    &lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;dynamic_reconfigure/server.h&amp;gt;
&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyNodeClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// dynamic reconfigure&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;dynamic_reconfigure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reconfigSrv_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Dynamic reconfiguration service&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// define the callback&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reconfigureRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The inplementation:&lt;/p&gt;
    &lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyNodeClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reconfigureRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt;
   &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Here is what a rqt gui for dynamic_reconfigure looks like.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/rosparam_handler.png&quot; alt=&quot;rqt&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Enjoy!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Yu Zhang</name><email>yu.zhang.bit@gmail.com</email><uri>http://yuzhangbit.github.io</uri></author><category term="ROS" /><category term="Programming" /><summary type="html">There are two ways to set parameters in ROS. One is reading parameter value from yaml files to the parameter_server. It’s not flexisible to adjust the values of parameters on parameter_server on the fly. The parameters are passed to your app classes by the private ros node handle. You have to crease the variables in the class to hold these values.</summary></entry><entry><title type="html">Python binding</title><link href="http://localhost:4000/tools/python-binding/" rel="alternate" type="text/html" title="Python binding" /><published>2017-03-28T00:00:00+08:00</published><updated>2017-03-28T00:00:00+08:00</updated><id>http://localhost:4000/tools/python-binding</id><content type="html" xml:base="http://localhost:4000/tools/python-binding/">&lt;p&gt;Basically there are two ways to create python bindings for your ros libraries.
One way is to start from scratch and shows all the necessary details to create the python interfaces for c++ libraries in CMakeLists.txt.
You can find a working example from &lt;a href=&quot;https://github.com/luator/boost-python-catkin-example&quot;&gt;https://github.com/luator/boost-python-catkin-example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The necessary step is lised below:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;find the boost python component and python libraries.&lt;/li&gt;
  &lt;li&gt;catkin_python_setup()&lt;/li&gt;
  &lt;li&gt;add_libraries()&lt;/li&gt;
  &lt;li&gt;install the shared the libraries called by python interfaces to the place where python can find it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second way is to using the tool developed by ETHZ-ASL.
Their tool use the catkin_simple() package to simplify the cmakelists script you need to write and hides all the details within
their helper package–&lt;code class=&quot;highlighter-rouge&quot;&gt;python_module&lt;/code&gt;.  At a first glimpse, it’s very confusing. But if you understand how the first method works, you can
basically create a tool similar to ASL’s, or even a better one.&lt;/p&gt;

&lt;p&gt;The helper package is called &lt;code class=&quot;highlighter-rouge&quot;&gt;python_module&lt;/code&gt;. It provides a script function &lt;code class=&quot;highlighter-rouge&quot;&gt;add_python_export_library()&lt;/code&gt; that helps you to find
the boost python component, python libraries folder, python include folder.  It also adds the libraries by invoking the
native cmake command add_libraries() in their &lt;code class=&quot;highlighter-rouge&quot;&gt;python_module&lt;/code&gt; package. The ‘catkin_python_setup()’ is called as well.
The ‘python_module’ marks the installed files as &lt;code class=&quot;highlighter-rouge&quot;&gt;ADDITIONAL_MAKE_CLEAN_FILES&lt;/code&gt;, which makes updating of the python module handy.&lt;/p&gt;

&lt;p&gt;They have several assumptions when using their tool to create python bindings.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The python interfaces are separated from c++ ros package as a new package.&lt;/li&gt;
  &lt;li&gt;The python binding ros package names after the original c++ package with a suffix &lt;code class=&quot;highlighter-rouge&quot;&gt;_python&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The name of the installed python module in dists-package will be the same as the c++ package.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A typical example of their method can be found &lt;a href=&quot;https://github.com/ethz-asl/Schweizer-Messer/tree/master/sm_python&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The detailed instruction of ETHZ-ASL’s method can be found &lt;a href=&quot;https://github.com/ethz-asl/programming_guidelines/wiki/Adding-python-bindings-to-your-cpp-catkin-package&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content><author><name>Yu Zhang</name><email>yu.zhang.bit@gmail.com</email><uri>http://yuzhangbit.github.io</uri></author><category term="ROS" /><category term="Programming" /><summary type="html">Basically there are two ways to create python bindings for your ros libraries. One way is to start from scratch and shows all the necessary details to create the python interfaces for c++ libraries in CMakeLists.txt. You can find a working example from https://github.com/luator/boost-python-catkin-example</summary></entry><entry><title type="html">Use Gtest with ROS</title><link href="http://localhost:4000/tools/Use-Gtest-with-ROS/" rel="alternate" type="text/html" title="Use Gtest with ROS" /><published>2017-02-18T00:00:00+08:00</published><updated>2017-02-18T00:00:00+08:00</updated><id>http://localhost:4000/tools/Use-Gtest-with-ROS</id><content type="html" xml:base="http://localhost:4000/tools/Use-Gtest-with-ROS/">&lt;p&gt;There are several interesting tips you need to know about catkin tools&lt;/p&gt;

&lt;h3 id=&quot;configuration-for-catkin-workspace-using-caktin-tools&quot;&gt;Configuration for catkin workspace using caktin Tools&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;enable &lt;code class=&quot;highlighter-rouge&quot;&gt;-Wall -Wextra&lt;/code&gt; of the compiler to report potential coding bugs&lt;/li&gt;
  &lt;li&gt;enable robust cleaning of individual packages with &lt;code class=&quot;highlighter-rouge&quot;&gt;linked&lt;/code&gt; layout , actually this is a default value of catkin_tools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The configuration is below:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;catkin config --cmake-args -DCMAKE_CXX_FLAGS=&quot;-Wall -Wextra&quot; -DCMAKE_BUILD_TYPE=Release  
catkin config --link-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Build ros gtests using catkin_tools:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;catkin build --make-args tests
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;using-gtest-in-sub-directory-of-ros-packages&quot;&gt;Using gtest in sub-directory of ros packages.&lt;/h3&gt;

&lt;h4 id=&quot;install-the-dependency-first&quot;&gt;Install the dependency first&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libgtest-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;the-cmakeliststxt-codes-in-cmakelists&quot;&gt;The CMakeLists.txt codes in CMakeLists&lt;/h4&gt;
&lt;p&gt;The the cmakelists structure should be&lt;/p&gt;

&lt;div class=&quot;language-cmake highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ros_package    
  -launch      
  -cfg     
  -cmake      
  -include     
  -src     
  -external_lib     
    -include     
    -src     
    -doc     
    -cmake     
    -&lt;span class=&quot;nf&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;libraries tests&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     
      -CMakeLists.&lt;span class=&quot;nf&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;test cmakelists&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     
    -CMakeLists.&lt;span class=&quot;nf&quot;&gt;txt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;libraries CMakeLists files&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     
  -&lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;ros tests&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       
  -CMakeLists.&lt;span class=&quot;nf&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;top level CMakeLists&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The test CMakeLists should be&lt;/p&gt;

&lt;div class=&quot;language-cmake highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;catkin_add_gtest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;test_name test1.cpp test2.cpp&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;nb&quot;&gt;target_link_libraries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;test_name &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;catkin_LIBRARIES&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Yu Zhang</name><email>yu.zhang.bit@gmail.com</email><uri>http://yuzhangbit.github.io</uri></author><category term="ROS" /><category term="Programming" /><summary type="html">There are several interesting tips you need to know about catkin tools</summary></entry><entry><title type="html">The Best IDE for ROS</title><link href="http://localhost:4000/tools/The-Best-IDE-for-ROS/" rel="alternate" type="text/html" title="The Best IDE for ROS" /><published>2017-02-15T00:00:00+08:00</published><updated>2017-02-15T00:00:00+08:00</updated><id>http://localhost:4000/tools/The-Best-IDE-for-ROS</id><content type="html" xml:base="http://localhost:4000/tools/The-Best-IDE-for-ROS/">&lt;p&gt;I have tried &lt;a href=&quot;https://eclipse.org/&quot;&gt;Eclipse&lt;/a&gt;, &lt;a href=&quot;https://www.qt.io/ide/&quot;&gt;QtCreator&lt;/a&gt;, &lt;a href=&quot;https://www.jetbrains.com/clion/specials/clion/clion.html?&amp;amp;gclid=CjwKEAiAlZDFBRCKncm67qihiHwSJABtoNIgPAomPOm6xbKp2mfavGmu9fGtufYJ0GDqWtY7XtDNnhoC_q3w_wcB&amp;amp;gclsrc=aw.ds.ds&amp;amp;dclid=CO6L18X9ktICFQqtTwodZNEIDQ&quot;&gt;Clion&lt;/a&gt; for c++ software development in ROS.&lt;/p&gt;

&lt;p&gt;CLion is my favorite IDE in terms of cmake based projects. For ROS or cmake based c++ projects, you can use clion out of box. If you have an university Email address, you can use CLion for free.  Here is the &lt;a href=&quot;https://www.jetbrains.com/student/&quot;&gt;registration link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also &lt;a href=&quot;http://www.roboware.me/#/&quot;&gt;Roboware&lt;/a&gt; is a new star among &lt;a href=&quot;http://wiki.ros.org/IDEs&quot;&gt;IDEs for ROS&lt;/a&gt;. I haven’t try it out yet, so I can’t say much about it.&lt;/p&gt;

&lt;p&gt;The explaination of the configuration of clion is coming soon.&lt;/p&gt;</content><author><name>Yu Zhang</name><email>yu.zhang.bit@gmail.com</email><uri>http://yuzhangbit.github.io</uri></author><category term="ROS" /><category term="Programming" /><summary type="html">I have tried Eclipse, QtCreator, Clion for c++ software development in ROS.</summary></entry><entry><title type="html">Configuration Of Development Environment In Windows</title><link href="http://localhost:4000/tools/Configuration-of-Development-Environment-in-Windows/" rel="alternate" type="text/html" title="Configuration Of Development Environment In Windows" /><published>2016-09-07T00:00:00+08:00</published><updated>2016-09-07T00:00:00+08:00</updated><id>http://localhost:4000/tools/Configuration-of-Development-Environment-in-Windows</id><content type="html" xml:base="http://localhost:4000/tools/Configuration-of-Development-Environment-in-Windows/">&lt;h3 id=&quot;安装步骤&quot;&gt;安装步骤&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;requirements:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VS2010 Professional&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sourceforge.net/projects/opencvlibrary/files/opencv-win/2.2/OpenCV-2.2.0-win32-vs2010.exe/download&quot;&gt;Opencv 2.2&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;下载后直接安装， 默认路径&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/robotology/icub-main/releases/download/v1.4.0/iCub_1.4.0_v10_x86_1.exe&quot;&gt;Ipopt binary&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;下载后点开，只勾选ipopt选项，然后安装，记下安装路径&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Eigen&lt;/li&gt;
  &lt;li&gt;planner&lt;/li&gt;
  &lt;li&gt;devLibrary&lt;/li&gt;
  &lt;li&gt;打开工程项目，根据上述库的安装位置更新相应配置&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;可能出现的问题&quot;&gt;可能出现的问题&lt;/h3&gt;
&lt;p&gt;当直接关闭控制台窗口时，可能出现如下问题：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;forrtl: error (200): program aborting due to control-C event
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;原因：&lt;a href=&quot;http://www.mathworks.com/matlabcentral/newsreader/view_thread/251203.html&quot;&gt;http://www.mathworks.com/matlabcentral/newsreader/view_thread/251203.html&lt;/a&gt;&lt;/p&gt;</content><author><name>Yu Zhang</name><email>yu.zhang.bit@gmail.com</email><uri>http://yuzhangbit.github.io</uri></author><category term="Optimization" /><summary type="html">安装步骤 requirements:</summary></entry><entry><title type="html">Useful Website About Optimization</title><link href="http://localhost:4000/tools/Useful-Website-about-Optimization/" rel="alternate" type="text/html" title="Useful Website About Optimization" /><published>2015-10-25T00:00:00+08:00</published><updated>2015-10-25T00:00:00+08:00</updated><id>http://localhost:4000/tools/Useful-Website-about-Optimization</id><content type="html" xml:base="http://localhost:4000/tools/Useful-Website-about-Optimization/">&lt;p&gt;IPOPT install tutorial: &lt;a href=&quot;http://wiki.icub.org/wiki/Installing_IPOPT&quot;&gt;http://wiki.icub.org/wiki/Installing_IPOPT&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NLOPT install tutorial: &lt;a href=&quot;http://ab-initio.mit.edu/wiki/index.php/NLopt&quot;&gt;http://ab-initio.mit.edu/wiki/index.php/NLopt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OPTIMIZATION resources: &lt;a href=&quot;http://plato.asu.edu/guide.html&quot;&gt;http://plato.asu.edu/guide.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Benchmarks for different optimization software: &lt;a href=&quot;http://plato.asu.edu/bench.html&quot;&gt;http://plato.asu.edu/bench.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GUROBI benchmarks: &lt;a href=&quot;http://www.gurobi.com/pdfs/benchmarks.pdf&quot;&gt;http://www.gurobi.com/pdfs/benchmarks.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;wiki pages–List of optimization software: &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_optimization_software&quot;&gt;https://en.wikipedia.org/wiki/List_of_optimization_software&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;wiki pages–Comparison of optimization software: &lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_optimization_software&quot;&gt;https://en.wikipedia.org/wiki/Comparison_of_optimization_software&lt;/a&gt;&lt;/p&gt;</content><author><name>Yu Zhang</name><email>yu.zhang.bit@gmail.com</email><uri>http://yuzhangbit.github.io</uri></author><category term="Optimization" /><summary type="html">IPOPT install tutorial: http://wiki.icub.org/wiki/Installing_IPOPT</summary></entry><entry><title type="html">How To Set Up Public Key Authentication?</title><link href="http://localhost:4000/tools/How-to-set-up-public-key-authentication/" rel="alternate" type="text/html" title="How To Set Up Public Key Authentication?" /><published>2015-09-26T00:00:00+08:00</published><updated>2015-09-26T00:00:00+08:00</updated><id>http://localhost:4000/tools/How-to-set-up-public-key-authentication</id><content type="html" xml:base="http://localhost:4000/tools/How-to-set-up-public-key-authentication/">&lt;p&gt;If you don’t want to input username and password when you push git repo to gitlab server, try ssh public-key authentication.&lt;/p&gt;

&lt;p&gt;First generate your public key if you have not already done by running the following on you computer:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh-keygen -t rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will see two files are generated. One is private. The other one is public.&lt;/p&gt;

&lt;p&gt;Next open the public one, and copy it to the gitlab server.&lt;/p&gt;

&lt;p&gt;Now , add the private key to your ssh agent by typing the command below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ssh-add private-key-name  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(maybe you should write this command to ~/.bashrc file)&lt;/p&gt;

&lt;p&gt;You can push your code to gitlabserver now.&lt;/p&gt;</content><author><name>Yu Zhang</name><email>yu.zhang.bit@gmail.com</email><uri>http://yuzhangbit.github.io</uri></author><category term="Tips" /><summary type="html">If you don’t want to input username and password when you push git repo to gitlab server, try ssh public-key authentication.</summary></entry></feed>